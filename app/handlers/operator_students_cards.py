import sys

from dotenv import load_dotenv

from app.handlers.teacher_tasks_queue import map_names_and_idt
from app.models.client import Client
from app.utils.files import *
from app.models.operator import Operator
from app.managers.operator_manager import OperatorManagerDetails, OperatorManagerStudentCards
from app.fsm_states.operator_states import CheckMessage, ReturnToQueue, ShowClientCard
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

router = Router()


def get_student_selection_keyboard():
    students = map_names_and_idt()  # {idt: (surname, name)}

    buttons = []
    for idt, (surname, name) in students.items():
        # alias = generate_student_alias(surname, name, idt)
        btn = InlineKeyboardButton(
            text=f"{surname} {name}",
            callback_data=f"student_alias_{idt}"
        )
        buttons.append([btn])  # one button per row

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_main_teacher")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data == "clients")
async def show_all_clients_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:</b>",
        reply_markup=get_student_selection_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    await state.set_state(ShowClientCard.get_client_id)

    # @router.callback_query(F.data == "clients"


@router.callback_query(ShowClientCard.get_client_id)
async def show_client_card_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    idt = callback.data.split("_")[-1]  # extract student ID
    await state.update_data(idt=idt)

    teacher = Operator(callback.from_user.id)
    manager = OperatorManagerStudentCards(teacher)
    await manager.show_client_card(callback, state)


@router.callback_query(F.data.in_({"t1", "t2"}), ShowClientCard.further_actions)
async def ask_task_change_handler(callback: types.CallbackQuery, state: FSMContext):
    task_number = 1 if callback.data == "t1" else 2
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_number}:")
    await state.update_data(task_number=task_number)
    await state.set_state(ShowClientCard.get_changed_task)
    await callback.message.delete()


@router.message(F.text, ShowClientCard.get_changed_task)
async def handle_task_change_handler(message: types.Message, state: FSMContext, bot: Bot):
    teacher = Operator(message.from_user.id)
    manager = OperatorManagerStudentCards(teacher)
    data = await state.get_data()
    await manager.change_task(message, state, task_number=data["task_number"])


@router.callback_query(F.data == "settask", ShowClientCard.further_actions)
async def ask_first_task(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É:")
    await callback.message.delete()
    await state.set_state(ShowClientCard.set_tasks_one)


@router.message(F.text, ShowClientCard.set_tasks_one)
async def ask_second_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É:")
    await state.update_data(task_one=message.text)
    await state.set_state(ShowClientCard.set_tasks_two)


@router.message(F.text, ShowClientCard.set_tasks_two)
async def finalize_task_set(message: types.Message, state: FSMContext):
    teacher = Operator(message.from_user.id, message.from_user.username)
    manager = OperatorManagerStudentCards(teacher)
    data = await state.get_data()

    await manager.set_all_tasks(message, state, data["task_one"], message.text)
    # await message.answer("‚úÖ –û–±–µ –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=keyboards.keyboard_main_teacher())
    await state.clear()


@router.callback_query(F.data == "setpenalty", ShowClientCard.further_actions)
async def ask_penalty_reason_handler(callback: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üßπ –ù–µ—É–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", callback_data="penalty_messy_desk")],
        [types.InlineKeyboardButton(text="üëü –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤—Ç–æ—Ä–æ–π –æ–±—É–≤–∏", callback_data="penalty_no_shoes")],
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —à—Ç—Ä–∞—Ñ–∞:", reply_markup=keyboard)

    await state.set_state(ShowClientCard.get_penalty_reasons)
    await callback.answer()


@router.callback_query(F.data.in_(["penalty_messy_desk", "penalty_no_shoes"]), ShowClientCard.get_penalty_reasons)
async def ask_whether_send_photo(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(reason=callback.data)

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–∞", callback_data="penalty_send_photo_yes")],
        [types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="penalty_send_photo_no")]]
    )
    await callback.message.edit_text("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?", reply_markup=keyboard)
    await state.set_state(ShowClientCard.get_whether_wants_photo)
    await callback.answer()


@router.callback_query(F.data == "penalty_send_photo_no", ShowClientCard.get_whether_wants_photo)
async def add_penalty_without_photo(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    reason = data["reason"]

    teacher = Operator(callback.from_user.id)
    manager = OperatorManagerStudentCards(teacher)
    await manager.add_penalty(callback, state, reason)


@router.callback_query(F.data == "penalty_send_photo_yes", ShowClientCard.get_whether_wants_photo)
async def prompt_for_penalty_photo(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —à—Ç—Ä–∞—Ñ–∞.")
    await state.set_state(ShowClientCard.waiting_penalty_photo)
    await callback.answer()


@router.message(ShowClientCard.waiting_penalty_photo, F.photo)
async def receive_penalty_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    client_id = data["idt"]
    reason = data["reason"]
    photo = message.photo[-1].file_id

    teacher = Operator(message.from_user.id)
    manager = OperatorManagerStudentCards(teacher)
    await manager.add_penalty_with_photo(message, state, reason, photo)


@router.callback_query(F.data == "removepenalty", ShowClientCard.further_actions)
async def ask_penalty_id_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —à—Ç—Ä–∞—Ñ–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    # await callback.message.delete()
    await state.set_state(ShowClientCard.get_penalty_id_to_delete)
    await state.update_data(msg_id=callback.message.message_id)


@router.message(F.text, ShowClientCard.get_penalty_id_to_delete)
async def remove_penalty_handler(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —à—Ç—Ä–∞—Ñ–∞.")
        return

    teacher = Operator(message.from_user.id)
    manager = OperatorManagerStudentCards(teacher)
    await manager.remove_penalty(message, int(message.text), state)
    # await state.clear()


@router.message(Command("restart"))
async def restart_bot(message: types.Message, bot: Bot):
    load_dotenv()
    teacher_ids = os.getenv("TEACHER_IDS").split(",")

    print(teacher_ids)
    if message.from_user.username not in teacher_ids:
        return await message.reply("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")

    await message.reply("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å‚Ä¶")

    # # –≤–∞—Ä–∏–∞–Ω—Ç A: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–æ–≤—ã–º
    os.execv(sys.executable, [sys.executable, "main.py"])

# @router.callback_query(F.data == "bk", ShowClientCard.further_actions)
# async def back_to_main_teacher_handler(callback: types.CallbackQuery, state: FSMContext):
#     teacher = Operator(callback.from_user.id)
#     manager = OperatorManagerStudentCards(teacher)
#     await manager.back_to_main_teacher(callback, state)

# `@router.message(CheckMessage.waiting_size, F.text)
# async def finish_work_get_params_handler(message: types.Message, state: FSMContext):
#     teacher = Operator(message.from_user.id, message.from_user.username)
#     manager = OperatorManagerDetails(teacher)
#     await manager.finish_work_get_params(message, state)
# `
